
1) Git Reset
reset is the command we use when we want to move the repository back to a previous commit, discarding any changes made after that commit.

Step 1: Find the previous commit
Step 2: Move the repository back to that step

Git Reset Find Commit in Log
First thing, we need to find the point we want to return to. To do that, we need to go through the log.

To avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing:

a)The first seven characters of the commit hash - this is what we need to refer to in our reset command.
b)the commit message

We reset our repository back to the specific commit using git reset commithash

2) Git Revert:
	Revert is the command we use when we want to take a previous commit and add it as a new commit, keeping the log intact.
	Step 1: Find the previous commit
	Step 2: Use it to make a new commit

Git Revert Find Commit in Log:

	First thing, we need to find the point we want to return to. To do that, we need to go through the log.

	To avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing:

	a)The first seven characters of the commit hash
	b)the commit message

3) Git commit --amend
	commit --amend is used to modify the most recent commit.

	It combines changes in the staging environment with the latest commit, and creates a new commit.

	This new commit replaces the latest commit entirely.

	Git Amend Commit Message
		
		One of the simplest things you can do with --amend is to change a commit message.

		Let's update the README.md and commit:
